Gary has a board of size NxM. Each cell in the board is a coloured dot. 
There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z).
Now Gary is getting bored and wants to play a game. 
The key of this game is to find a cycle that contain dots of same colour.
Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:

1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent.
Cells x and y are called adjacent if they share an edge.

Since Gary is colour blind, he wants your help. 
Your task is to determine if there exists a cycle on the board.

Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true

Solution of Problem :-

import java.util.*;

public class Solution {
    
    static int l = 0;

    private static void solve(char[][] graph, int n, int m, int i, int j, char c, int k, int[][] dots) {
        if (i < 0 || i == n || j < 0 || j == m) {
            return;
        }
        if (graph[i][j] != c) {
            return;
        }
        if (dots[i][j] != 0) {
            if (dots[i][j] - k + 1 >= 4) {
                l++;
            }
            return;
        }
        if (l > 0) {
            return;
        }
        k++;
        dots[i][j] = k;
        solve(graph, n, m, i - 1, j, c, k, dots);//up
        solve(graph, n, m, i, j + 1, c, k, dots);//right
        solve(graph, n, m, i + 1, j, c, k, dots);//down
        solve(graph, n, m, i, j - 1, c, k, dots);//left
    }

    int solve(String[] board , int n, int m) {
		char graph[][] = new char[n][m];
        int k = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                String str = board[k];
                graph[i][j] = str.charAt(j);
            }
            k++;
        }
        int dots[][] = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (dots[i][j] == 0) {
                    solve(graph, n, m, i, j, graph[i][j], 0, dots);
                    if (l > 0) {
                        break;
                    }
                }
            }
        }
        if (l > 0) {
            return 1;
        }
        return 0;
	}
	
	
}
