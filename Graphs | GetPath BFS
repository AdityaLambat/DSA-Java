Given an undirected graph G(V, E) and two vertices v1 and v2 (as integers), find and print the path from v1 to v2 (if exists).
Print nothing if there is no path between v1 and v2.
Find the path using BFS and print the shortest path available.

Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
3. Print the path in reverse order. That is, print v2 first, then intermediate vertices and v1 at last.
4. Save the input graph in Adjacency Matrix.

Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
3 0 1

Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
public class Solution {
    
    public static ArrayList<Integer> getPathBFS(int adjMatrix[][], int v1, int v2) {
        int n = adjMatrix.length;
        boolean track[] = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        q.add(v1);
        track[v1] = true;
        map.put(v1, -1);
        boolean pathFound = false;
        while (!q.isEmpty()) {
            int currVertex = q.poll();
            for (int i = 0; i < adjMatrix.length; i++) {
                if (adjMatrix[currVertex][i] == 1 && track[i] == false) {
                    q.add(i);
                    track[i] = true;
                    map.put(i, currVertex);
                    if (i == v2) {
                        pathFound = true;
                        break;
                    }
                }
            }
        }
        if (pathFound) {
            ArrayList<Integer> path = new ArrayList<>();
            int currVertex = v2;
            while (currVertex != -1) {
                path.add(currVertex);
                int parent = map.get(currVertex);
                currVertex = parent;
            }
            return path;

        } else {
            return null;
        }
    }
	
	public static void main(String[] args)  throws NumberFormatException, IOException{
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int e = s.nextInt();
        int adjMatrix[][] = new int[n][n];
        for (int i = 0; i < e; i++) {
            int v1 = s.nextInt();
            int v2 = s.nextInt();
            adjMatrix[v1][v2] = 1;
            adjMatrix[v2][v1] = 1;
        }
        int v1 = s.nextInt();
        int v2 = s.nextInt();
        ArrayList<Integer> path = getPathBFS(adjMatrix, v1, v2);
      	if (path != null) {
           for (int i : path) {
               System.out.print(i + " ");
           }
       }
	}
}
