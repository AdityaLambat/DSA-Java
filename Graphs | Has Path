Given an undirected graph G(V, E) and two vertices v1 and v2 (as integers), check if there exists any path between them or not. 
Print true if the path exists and false otherwise.

Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.

Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
true

Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :
false

Solution of Problem :-

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
public class Solution {
    
    public static void hasPath(int adjMatrix[][], int v1, int v2) {
        if(v1 == adjMatrix.length || v2 == adjMatrix.length){
            System.out.println("false");
            return;
        }
        if (adjMatrix[v1][v2] == 1) {
            System.out.println("true");
            return;
        }
        Queue<Integer> q = new LinkedList<>();
        boolean visited[] = new boolean[adjMatrix.length];
        q.add(v1);
        visited[v1] = true;
        while (!q.isEmpty()) {
            int currVertex = q.poll();
            for (int i = 0; i < adjMatrix.length; i++) {
                if (adjMatrix[currVertex][i] == 1 && visited[i] == false) {
                    q.add(i);
                    visited[i] = true;
                }
            }
        }
        System.out.println(visited[v2]);
    }

	public static void main(String[] args) throws NumberFormatException, IOException {
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int e = s.nextInt();
        int adjMatrix[][] = new int[n][n];
        for (int i = 0; i < e; i++) {
            int v1 = s.nextInt();
            int v2 = s.nextInt();
            adjMatrix[v1][v2] = 1;
            adjMatrix[v2][v1] = 1;
        }
        int v1 = s.nextInt();
        int v2 = s.nextInt();
        hasPath(adjMatrix, v1, v2);
	}

}
