Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. 
And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.

Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5

Solution of Problem :-

import java.util.Arrays;
import java.util.Scanner;

class EdgeList implements Comparable<EdgeList> {

    int v1;
    int v2;
    int weight;

    EdgeList(int v1, int v2, int weight) {
        this.v1 = v1;
        this.v2 = v2;
        this.weight = weight;
    }

    @Override
    public int compareTo(EdgeList t) {
        return this.weight - t.weight;
    }

}

public class Solution {

    private static int findParent(int v, int parent[]) {
        if (v == parent[v]) {
            return v;
        }
        return findParent(parent[v], parent);
    }

    public static EdgeList[] kruskalsAlgorithm(EdgeList[] edge, int n) {
        Arrays.sort(edge);
        EdgeList mst[] = new EdgeList[n - 1];
        int parent[] = new int[n];
        for (int j = 0; j < n; j++) {
            parent[j] = j;
        }
        int count = 0, i = 0;
        while (count != n - 1) {
            EdgeList curentEdge = edge[i++];
            int v1Parent = findParent(curentEdge.v1, parent);
            int v2Parent = findParent(curentEdge.v2, parent);
            if (v1Parent != v2Parent) {
                mst[count] = curentEdge;
                count++;
                parent[v1Parent] = v2Parent;
            }
        }
        return mst;
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int V = sc.nextInt();
        int E = sc.nextInt();
        EdgeList edge[] = new EdgeList[E];
        for (int i = 0; i < E; i++) {
            int v1 = sc.nextInt();
            int v2 = sc.nextInt();
            int weight = sc.nextInt();
            EdgeList e = new EdgeList(v1, v2, weight);
            edge[i] = e;
        }
        EdgeList mst[] = kruskalsAlgorithm(edge, V);
        for (int i = 0; i < mst.length; i++) {
            if (mst[i].v1 < mst[i].v2) {
                System.out.println(mst[i].v1 + " " + mst[i].v2 + " " + mst[i].weight);
            } else {
                System.out.println(mst[i].v2 + " " + mst[i].v1 + " " + mst[i].weight);
            }
        }
    }
}
