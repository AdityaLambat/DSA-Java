It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . 
But Gary wants the biggest piece of '1's and no '0's . 
A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. 
Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?

Sample Input 1:
2
1 1
0 1
Sample Output 1:
3

Solution of Problem :-

public class Solution {

    static int[][] dir = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
    
    private static int cakeDFS(char cake[][], int n, int i, int j, boolean visited[][]) {
        int count = 1;
        if (i > 0 && !visited[i - 1][j] && cake[i - 1][j] == '1') { // up
            visited[i - 1][j] = true;
            count += cakeDFS(cake, n, i - 1, j, visited);
        }
        if (j > 0 && !visited[i][j - 1] && cake[i][j - 1] == '1') { //left
            visited[i][j - 1] = true;
            count += cakeDFS(cake, n, i, j - 1, visited);
        }
        if (i < n - 1 && !visited[i + 1][j] && cake[i + 1][j] == '1') { //down
            visited[i + 1][j] = true;
            count += cakeDFS(cake, n, i + 1, j, visited);
        }
        if (j < n - 1 && !visited[i][j + 1] && cake[i][j + 1] == '1') { //right
            visited[i][j + 1] = true;
            count += cakeDFS(cake, n, i, j + 1, visited);
        }

        return count;
    }

	public static int dfs(String[] edge, int n) {
        char cake[][] = new char[n][n];
        for (int i = 0; i < n; i++) {
            String str = edge[i];
            for (int j = 0; j < n; j++) {
                cake[i][j] = str.charAt(j);
            }
        }
        boolean visited[][] = new boolean[n][n];
        int countMax = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (cake[i][j] == '1' && !visited[i][j]) {
                    visited[i][j] = true;
                    int ans = cakeDFS(cake, n, i, j, visited);
                    countMax = Math.max(ans, countMax);
                }
            }
        }
        return countMax;
	}

}
