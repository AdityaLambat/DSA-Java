Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. 
And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.

Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 1 3
1 2 1
0 3 5

Solution of Problem :-

import java.util.Scanner;

public class Solution {
    
    private static int findMinVertex(boolean[] visited, int[] weight) {

        int minVertex = -1;
        for (int i = 0; i < visited.length; i++) {
            if (!visited[i] && (minVertex == -1 || weight[i] < weight[minVertex])) {
                minVertex = i;
            }
        }
        return minVertex;
    }

    public static void primsAlgorithm(int[][] adjMatrix) {
        int n = adjMatrix.length;
        boolean visited[] = new boolean[n];
        int parent[] = new int[n];
        int weight[] = new int[n];
        // source - vertex 0 
        parent[0] = -1;
        weight[0] = 0;
        for (int i = 1; i < n; i++) {
            weight[i] = Integer.MAX_VALUE;
        }
        for (int i = 0; i < n; i++) {
            int minVertex = findMinVertex(visited, weight);
            visited[minVertex] = true;
            // Explore neighbors of min vertx 
            for (int j = 0; j < n; j++) {
                if (adjMatrix[minVertex][j] != 0 && !visited[j]) {
                    if (weight[j] > adjMatrix[minVertex][j]) {
                        // update values 
                        weight[j] = adjMatrix[minVertex][j];
                        parent[j] = minVertex;
                    }
                }
            }
        }
        // Print MST 
        for (int i = 1; i < n; i++) {
            if (i < parent[i]) {
                System.out.println(i + " " + parent[i] + " " + weight[i]);
            } else {
                System.out.println(parent[i] + " " + i + " " + weight[i]);
            }
        }
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int V = s.nextInt();
        int E = s.nextInt();
        int adjMatrix[][] = new int[V][V];
        for (int i = 0; i < E; i++) {
            int v1 = s.nextInt();
            int v2 = s.nextInt();
            int weight = s.nextInt();
            adjMatrix[v1][v2] = weight;
            adjMatrix[v2][v1] = weight;
        }
        primsAlgorithm(adjMatrix);
    }
    
}
