Given an undirected graph G(V,E), check if the graph G is connected graph or not.

Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.

Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true

Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;
public class Solution {
    
    private static void isConnectedDFS(int adjMatrix[][], int currVertex, boolean visited[]) {
        visited[currVertex] = true;
        for (int i = 0; i < adjMatrix.length; i++) {
            if (adjMatrix[currVertex][i] == 1 && visited[i] == false) {
                visited[i] = true;
                isConnectedDFS(adjMatrix, i, visited);
            }
        }
    }

    public static boolean isConnected(int adjMatrix[][]) {
        boolean visited[] = new boolean[adjMatrix.length];
        isConnectedDFS(adjMatrix, 0, visited);
        for (boolean i : visited) {
            if (i == false) {
                return false;
            }
        }
        return true;
    }

	public static void main(String[] args) throws NumberFormatException, IOException {
       Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int e = s.nextInt();
        if(n == 0){
            System.out.println("true");
            return;
        }
        int adjMatrix[][] = new int[n][n];
        for (int i = 0; i < e; i++) {
            int v1 = s.nextInt();
            int v2 = s.nextInt();
            adjMatrix[v1][v2] = 1;
            adjMatrix[v2][v1] = 1;
        }
        System.out.println(isConnected(adjMatrix));
	}

}
