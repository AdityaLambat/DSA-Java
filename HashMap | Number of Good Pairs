Given an array of integers nums, return the number of good pairs.
A pair (i, j) is called good if nums[i] == nums[j] and i < j.

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

Example 2:
Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.

import java.util.*;
public class Solution {
    public int numIdenticalPairs(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                int freq = map.get(nums[i]);
                map.put(nums[i], freq + 1);
                continue;
            }
            map.put(nums[i], 1);
        }
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            int freq = map.get(nums[i]);
            if (freq > 1) {
                count = count + freq * (freq - 1) / 2;
            }
            map.put(nums[i], 0);
        }
        return count;
    }
}
